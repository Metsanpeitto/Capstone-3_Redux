{"version":3,"sources":["imgs/finland.png","imgs/norway.png","imgs/sweden.png","imgs/denmark.png","redux/locations/locations.js","redux/filter/filter.js","redux/configureStore.js","components/Card.js","components/Displayer.js","imgs/scandinavia.png","pages/Locations.js","pages/Details.js","imgs/next.svg","imgs/microphone.svg","imgs/settings.svg","components/Navbar.js","api/api.js","redux/api/api.js","App.js","reportWebVitals.js","index.js"],"names":["RECEIVE_LOCATIONS","FETCH_CITIES","initialState","countries","imgs","Finland","Sweden","Norway","Denmark","locations","cities","reducer","state","action","type","FILTER_COUNTRIES","FILTER_REFRESH","countriesFiltered","value","payload","newCountries","length","forEach","c","push","category","combineReducers","locationsReducer","filtersReducer","store","createStore","applyMiddleware","thunk","logger","Card","props","img","country","city","temp","tempMax","tempMin","main","className","src","alt","Displayer","dispatch","useDispatch","useSelector","useState","countriesOld","setCountriesOld","useEffect","placeholder","onChange","e","target","id","name","map","index","to","pathname","itemProps","countryName","data","active","exact","Locations","Scandinavia","Details","citiesOld","setCitiesOld","location","fetchCities","Navbar","Next","Mic","Settings","request","axios","get","process","result","status","list","getLocations","a","axiosOulu","axiosHelsinki","axiosTornio","axiosKemili","axiosLulea","axiosUppsala","axiosGoteborg","axiosStockholm","axioOsslo","axiosTromso","axiosVardo","axiosBergen","axiosCopenhagen","axiosHelsingor","axiosSkagen","axiosAlborg","all","then","spread","res0","res1","res2","res3","res4","res5","res6","res7","res8","res9","res10","res11","res12","res13","res14","res15","europe","oulu","helsinki","tornio","kemili","lulea","uppsala","goteborg","stockholm","oslo","tromso","vardo","bergen","copenhagen","helsingor","skagen","aalborg","countriesObject","keys","Object","countriesNew","kelvinDifference","k","citiesObject","citiesNew","cityObject","rain","snow","temp_max","temp_min","humidity","tempC","toFixed","tempMaxC","tempMinC","receiveLocations","App","this","path","component","React","Component","connect","oldLocations","setTimeout","api","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f2f36ab.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/finland.9c0d44c3.png\";","export default __webpack_public_path__ + \"static/media/norway.adc68c56.png\";","export default __webpack_public_path__ + \"static/media/sweden.a00cbf4b.png\";","export default __webpack_public_path__ + \"static/media/denmark.82a15586.png\";","/* eslint-disable object-shorthand */\nimport Finland from '../../imgs/finland.png';\nimport Norway from '../../imgs/norway.png';\nimport Sweden from '../../imgs/sweden.png';\nimport Denmark from '../../imgs/denmark.png';\n\nconst RECEIVE_LOCATIONS = 'locationStore/locations/RECEIVE_LOCATIONS';\nconst FETCH_CITIES = 'locationStore/locations/FETCH_CITIES';\n\nexport const fetchCities = (cities) => ({\n  type: FETCH_CITIES,\n  cities,\n});\n\nconst initialState = {\n  countries: ['Finland', 'Sweden', 'Norway', 'Denmark'],\n  imgs: [Finland, Sweden, Norway, Denmark],\n  locations: null,\n  cities: null,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case RECEIVE_LOCATIONS: {\n      const { locations } = action;\n      return {\n        ...state, locations,\n      };\n    }\n    case FETCH_CITIES: {\n      const { cities } = action;\n      return {\n        ...state,\n        cities: cities,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","const FILTER_COUNTRIES = 'locationStore/filter/FILTER_COUNTRIES';\nconst FILTER_REFRESH = 'locationStore/filter/FILTER_REFRESH';\n\nconst initialState = {\n  countriesFiltered: null,\n  value: '-',\n  countries: ['Finland', 'Sweden', 'Norway', 'Denmark'],\n};\n\nexport const filterCountries = (payload) => ({\n  type: FILTER_COUNTRIES,\n  payload,\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FILTER_COUNTRIES: {\n      const value = action.payload;\n      const { countries } = state;\n      let newCountries = [];\n      if (countries.length > 0) {\n        if (value === '-') {\n          newCountries = null;\n        } else {\n          countries.forEach((c) => {\n            if (c === value) {\n              newCountries.push(c);\n            }\n          });\n        }\n      }\n      return {\n        countriesFiltered: newCountries,\n        value,\n        countries,\n      };\n    }\n    case FILTER_REFRESH: {\n      const { value, countries } = state;\n      let newCountries = countries;\n      if (countries) {\n        if (countries.length > 0) {\n          if (value !== '-') {\n            newCountries = [];\n            countries.forEach((c) => {\n              if (c.category === value) {\n                newCountries.push(c);\n              }\n            });\n          }\n        }\n      }\n\n      return {\n        countriesFiltered: newCountries,\n        value,\n        countries,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport locationsReducer from './locations/locations';\nimport filtersReducer from './filter/filter';\n\nconst reducer = combineReducers({\n  locationsReducer,\n  filtersReducer,\n});\n\nconst store = createStore(reducer, applyMiddleware(thunk, logger));\n\nexport default store;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Card(props) {\n  const { img, cities, country } = props;\n  const city = cities;\n  const {\n    temp, tempMax, tempMin, main,\n  } = city;\n  return (\n    <div className=\"card\">\n      <img src={img} alt=\"imagecountry\" className=\"img-country\" />\n      <h4 className=\"name-country\">{country}</h4>\n      <h5 className=\"temperature-country\">{temp}</h5>\n      <h5 className=\"main-country\">{main}</h5>\n      <div className=\"max-min\">\n        <h6 className=\"temperature-min-country\">{tempMin}</h6>\n        <h6 className=\"temperature-max-country\">{tempMax}</h6>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\nCard.propTypes = { img: PropTypes.string.isRequired };\nCard.propTypes = { cities: PropTypes.string.isRequired };\nCard.propTypes = { country: PropTypes.string.isRequired };\n","/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Card from './Card';\nimport { filterCountries } from '../redux/filter/filter';\n\nfunction Displayer() {\n  const dispatch = useDispatch();\n  const { locationsReducer } = useSelector((state) => state);\n  const { filtersReducer } = useSelector((state) => state);\n  const { countries, imgs, locations } = locationsReducer;\n  const { countriesFiltered } = filtersReducer;\n  const [countriesOld, setCountriesOld] = useState(null);\n\n  const filter = (e) => {\n    const { value } = e.target;\n    dispatch(filterCountries(value));\n  };\n\n  useEffect(() => {\n    if (!countriesFiltered) {\n      if (countries !== countriesOld) {\n        setCountriesOld(countries);\n      }\n    } else if (countriesFiltered !== countriesOld) {\n      setCountriesOld(countriesFiltered);\n    }\n  });\n\n  return (\n    <div className=\"locations-displayer\">\n      <div className=\"stats\">\n        <h6 className=\"stats\">STATS BY COUNTRY</h6>\n        <select\n          className=\"filter-category\"\n          placeholder=\"Category\"\n          onChange={filter}\n          id=\"input-category\"\n          name=\"input-category\"\n        >\n          <option value=\"-\"> - </option>\n          <option value=\"Finland\">Finland</option>\n          <option value=\"Sweden\">Sweden</option>\n          <option value=\"Norway\">Norway</option>\n          <option value=\"Denmark\">Denmark</option>\n        </select>\n      </div>\n\n      {locations ? (\n        <div className=\"displayer-countries\">\n          {countriesOld.map((c, index) => (\n            <Link\n              key={countries[index]}\n              to={{\n                pathname: './Details',\n                itemProps: {\n                  countryName: countries[index],\n                  data: locations[index],\n                  img: imgs[index],\n                },\n              }}\n              active=\"true\"\n              exact=\"true\"\n            >\n              <Card\n                cities={locations[index]}\n                img={imgs[index]}\n                country={countries[index]}\n              />\n            </Link>\n          ))}\n        </div>\n      ) : (\n        <h5 className=\"empty\">Empty Collection</h5>\n      )}\n    </div>\n  );\n}\n\nexport default Displayer;\n","export default __webpack_public_path__ + \"static/media/scandinavia.6c700251.png\";","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport Displayer from '../components/Displayer';\nimport Scandinavia from '../imgs/scandinavia.png';\n\nconst Locations = () => (\n  <div className=\"locations\">\n    <div className=\"head\">\n      <div className=\"head-left\">\n        <img src={Scandinavia} alt=\"continent\" className=\"continent\" />\n      </div>\n      <div className=\"head-right\">\n        <h4 className=\"title\">Scandinavia</h4>\n        <h6 className=\"Countries\">4 Countries</h6>\n      </div>\n    </div>\n    <Displayer />\n  </div>\n);\nexport default Locations;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCities } from '../redux/locations/locations';\n\nfunction Details(props) {\n  const dispatch = useDispatch();\n  const { locationsReducer } = useSelector((state) => state);\n  const { cities } = locationsReducer;\n  const [citiesOld, setCitiesOld] = useState(null);\n\n  const { location } = props;\n  const { itemProps } = location;\n  const { countryName, data, img } = itemProps;\n\n  useEffect(() => {\n    if (!cities) {\n      dispatch(fetchCities(data));\n    }\n    if (data !== citiesOld) {\n      setCitiesOld(data);\n    }\n  });\n\n  return (\n    <div className=\"details\">\n      <div className=\"head\">\n        <div className=\"head-left\">\n          <img src={img} alt=\"country\" className=\"continent\" />\n        </div>\n        <div className=\"head-right\">\n          <h4 className=\"title\">{countryName}</h4>\n          <h6 className=\"cities\">5 Cities</h6>\n        </div>\n      </div>\n      <div className=\"details-displayer\">\n        <div className=\"stats\">\n          <h6 className=\"stats\">CITY/TOWN BREAKDOWN</h6>\n        </div>\n        {citiesOld\n          ? citiesOld.map((c) => (\n            <div className=\"details-city\" key={c.name}>\n              <h4 className=\"city-name\">{c.name}</h4>\n              <h5 className=\"city-temp\">{c.temp}</h5>\n              <div className=\"city-max-min\">\n                <h5 className=\"city-temp-min\">{c.tempMin}</h5>\n                /\n                <h5 className=\"city-temp-max\">{c.tempMax}</h5>\n              </div>\n            </div>\n          ))\n          : null}\n      </div>\n    </div>\n  );\n}\n\nexport default Details;\nDetails.propTypes = { countryName: PropTypes.string.isRequired };\nDetails.propTypes = { data: PropTypes.string.isRequired };\nDetails.propTypes = { img: PropTypes.string.isRequired };\nDetails.propTypes = { location: PropTypes.string.isRequired };\n","export default __webpack_public_path__ + \"static/media/next.3cd62455.svg\";","export default __webpack_public_path__ + \"static/media/microphone.dc190fb4.svg\";","export default __webpack_public_path__ + \"static/media/settings.f17c8abf.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Next from '../imgs/next.svg';\nimport Mic from '../imgs/microphone.svg';\nimport Settings from '../imgs/settings.svg';\n\nconst Navbar = () => (\n  <nav className=\"navBar\">\n    <div className=\"header\">\n      <Link\n        to=\"/\"\n        active=\"true\"\n        exact=\"true\"\n      >\n        <img src={Next} alt=\"return\" className=\"arrow-left\" />\n      </Link>\n      <h6 className=\"header-title\">cities</h6>\n      <img src={Mic} alt=\"mic\" className=\"mic\" />\n      <img src={Settings} alt=\"settings\" className=\"settings\" />\n    </div>\n  </nav>\n);\nexport default Navbar;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable camelcase */\nimport axios from 'axios';\n\nconst url = 'https://api.openweathermap.org/data/2.5/find?';\nconst appId = '7d21fcc19d2a5ea9e47384b584b78a2e';\n\nconst cities = [\n  'oulu',\n  'helsinki',\n  'tornio',\n  'kemi',\n  'lulea',\n  'uppsala',\n  'Göteborg',\n  'stockholm',\n  'oslo',\n  'tromso',\n  'vardo',\n  'bergen',\n  'copenhagen',\n  'helsingor',\n  'skagen',\n  'aalborg',\n];\n\nconst request = (city) => axios.get(`${url}q=${city}&appid=${appId}`);\n\nconst process = (result) => {\n  let location = null;\n  if (result) {\n    if (result.status === 200) {\n      const { data } = result;\n      const { list } = data;\n      // eslint-disable-next-line prefer-destructuring\n      location = list[0];\n    }\n  }\n  return location;\n};\n\nconst getLocations = async () => {\n  let locations = null;\n  const axiosOulu = request(cities[0]);\n  const axiosHelsinki = request(cities[1]);\n  const axiosTornio = request(cities[2]);\n  const axiosKemili = request(cities[3]);\n  const axiosLulea = request(cities[4]);\n  const axiosUppsala = request(cities[5]);\n  const axiosGoteborg = request(cities[6]);\n  const axiosStockholm = request(cities[7]);\n  const axioOsslo = request(cities[8]);\n  const axiosTromso = request(cities[9]);\n  const axiosVardo = request(cities[10]);\n  const axiosBergen = request(cities[11]);\n  const axiosCopenhagen = request(cities[12]);\n  const axiosHelsingor = request(cities[13]);\n  const axiosSkagen = request(cities[14]);\n  const axiosAlborg = request(cities[15]);\n\n  await axios\n    .all([\n      axiosOulu,\n      axiosHelsinki,\n      axiosTornio,\n      axiosKemili,\n      axiosLulea,\n      axiosUppsala,\n      axiosGoteborg,\n      axiosStockholm,\n      axioOsslo,\n      axiosTromso,\n      axiosVardo,\n      axiosBergen,\n      axiosCopenhagen,\n      axiosHelsingor,\n      axiosSkagen,\n      axiosAlborg,\n    ])\n    .then(\n      axios.spread(\n        (\n          res0,\n          res1,\n          res2,\n          res3,\n          res4,\n          res5,\n          res6,\n          res7,\n          res8,\n          res9,\n          res10,\n          res11,\n          res12,\n          res13,\n          res14,\n          res15,\n        ) => {\n          locations = {\n            europe: {\n              Finland: {\n                oulu: process(res0),\n                helsinki: process(res1),\n                tornio: process(res2),\n                kemili: process(res3),\n              },\n              Sweden: {\n                lulea: process(res4),\n                uppsala: process(res5),\n                goteborg: process(res6),\n                stockholm: process(res7),\n              },\n              Norway: {\n                oslo: process(res8),\n                tromso: process(res9),\n                vardo: process(res10),\n                bergen: process(res11),\n              },\n              Denmark: {\n                copenhagen: process(res12),\n                helsingor: process(res13),\n                skagen: process(res14),\n                aalborg: process(res15),\n              },\n            },\n          };\n        },\n      ),\n    );\n\n  // eslint-disable-next-line no-unused-vars\n  const countriesObject = locations.europe;\n  const keys = Object.keys(countriesObject);\n  const countriesNew = [];\n  const kelvinDifference = 273.15;\n  keys.forEach((k) => {\n    const citiesObject = countriesObject[k];\n    const citiesNew = [];\n    const cities = Object.keys(citiesObject);\n    cities.forEach((c) => {\n      const cityObject = citiesObject[c];\n      const {\n        id, name, main, rain, snow,\n      } = cityObject;\n      const { temp_max, temp_min, humidity } = main;\n      const tmpK = main.temp;\n      const tempC = (tmpK - kelvinDifference).toFixed(2);\n      const tempMaxC = (temp_max - kelvinDifference).toFixed(2);\n      const tempMinC = (temp_min - kelvinDifference).toFixed(2);\n\n      const temp = `${tempC} C `;\n      const tempMax = `${tempMaxC} C `;\n      const tempMin = `${tempMinC} C `;\n\n      const city = {\n        id,\n        name,\n        main,\n        rain,\n        snow,\n        temp,\n        tempMax,\n        tempMin,\n        humidity,\n      };\n      citiesNew.push(city);\n    });\n    countriesNew.push(citiesNew);\n  });\n  return countriesNew;\n};\nexport default { getLocations };\n","import api from '../../api/api';\n\nconst RECEIVE_LOCATIONS = 'locationStore/locations/RECEIVE_LOCATIONS';\n\nexport const receiveLocations = (locations) => ({\n  type: RECEIVE_LOCATIONS,\n  locations,\n});\n\n// eslint-disable-next-line no-unused-vars\nexport const getLocations = () => (dispatch) => {\n  // eslint-disable-next-line spaced-comment\n  //let oldLocations = JSON.parse(localStorage.getItem('locations'));\n  // eslint-disable-next-line spaced-comment\n  let oldLocations = null;\n  if (!oldLocations) {\n    api.getLocations().then((locations) => {\n      console.log(locations);\n      dispatch(receiveLocations(locations));\n      // eslint-disable-next-line indent\n      // localStorage.setItem('locations', JSON.stringify(locations));\n      oldLocations = locations;\n    });\n  } else {\n    setTimeout(() => {\n      dispatch(receiveLocations(oldLocations), 1000);\n    });\n  }\n  return oldLocations;\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport store from './redux/configureStore';\nimport Locations from './pages/Locations';\nimport Details from './pages/Details';\nimport NavBar from './components/Navbar';\nimport { getLocations } from './redux/api/api';\nimport './App.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    if (this.props) {\n      // eslint-disable-next-line react/prop-types\n      const { getLocations } = this.props;\n      getLocations();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/\" component={Locations} />\n          <Route exact path=\"/Details\" component={Details} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  state,\n});\n\nexport default connect(mapStateToProps, { store, getLocations })(App);\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/configureStore';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router basename={process.env.PUBLIC_URL}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}