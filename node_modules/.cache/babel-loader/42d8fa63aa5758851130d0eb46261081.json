{"ast":null,"code":"var FILTER_COUNTRIES='locationStore/filter/FILTER_COUNTRIES';var FILTER_REFRESH='locationStore/filter/FILTER_REFRESH';var initialState={countriesFiltered:null,value:'-',countries:['Finland','Sweden','Norway','Denmark']};export var filterCountries=function filterCountries(payload){return{type:FILTER_COUNTRIES,payload:payload};};var reducer=function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case FILTER_COUNTRIES:{var value=action.payload;var countries=state.countries;var newCountries=[];if(countries.length>0){if(value==='-'){newCountries=null;}else{countries.forEach(function(c){if(c===value){newCountries.push(c);}});}}return{countriesFiltered:newCountries,value:value,countries:countries};}case FILTER_REFRESH:{var _value=state.value,_countries=state.countries;var _newCountries=_countries;if(_countries){if(_countries.length>0){if(_value!=='-'){_newCountries=[];_countries.forEach(function(c){if(c.category===_value){_newCountries.push(c);}});}}}return{countriesFiltered:_newCountries,value:_value,countries:_countries};}default:return state;}};export default reducer;","map":{"version":3,"sources":["/home/jarri/Desktop/Work/Microverse/capstones/capstone-3-files/capstone-3_redux/src/redux/filter/filter.js"],"names":["FILTER_COUNTRIES","FILTER_REFRESH","initialState","countriesFiltered","value","countries","filterCountries","payload","type","reducer","state","action","newCountries","length","forEach","c","push","category"],"mappings":"AAAA,GAAMA,CAAAA,gBAAgB,CAAG,uCAAzB,CACA,GAAMC,CAAAA,cAAc,CAAG,qCAAvB,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,iBAAiB,CAAE,IADA,CAEnBC,KAAK,CAAE,GAFY,CAGnBC,SAAS,CAAE,CAAC,SAAD,CAAY,QAAZ,CAAsB,QAAtB,CAAgC,SAAhC,CAHQ,CAArB,CAMA,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,OAAD,QAAc,CAC3CC,IAAI,CAAER,gBADqC,CAE3CO,OAAO,CAAPA,OAF2C,CAAd,EAAxB,CAKP,GAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBR,YAAyB,IAAXS,CAAAA,MAAW,2CAChD,OAAQA,MAAM,CAACH,IAAf,EACE,IAAKR,CAAAA,gBAAL,CAAuB,CACrB,GAAMI,CAAAA,KAAK,CAAGO,MAAM,CAACJ,OAArB,CACA,GAAQF,CAAAA,SAAR,CAAsBK,KAAtB,CAAQL,SAAR,CACA,GAAIO,CAAAA,YAAY,CAAG,EAAnB,CACA,GAAIP,SAAS,CAACQ,MAAV,CAAmB,CAAvB,CAA0B,CACxB,GAAIT,KAAK,GAAK,GAAd,CAAmB,CACjBQ,YAAY,CAAG,IAAf,CACD,CAFD,IAEO,CACLP,SAAS,CAACS,OAAV,CAAkB,SAACC,CAAD,CAAO,CACvB,GAAIA,CAAC,GAAKX,KAAV,CAAiB,CACfQ,YAAY,CAACI,IAAb,CAAkBD,CAAlB,EACD,CACF,CAJD,EAKD,CACF,CACD,MAAO,CACLZ,iBAAiB,CAAES,YADd,CAELR,KAAK,CAALA,KAFK,CAGLC,SAAS,CAATA,SAHK,CAAP,CAKD,CACD,IAAKJ,CAAAA,cAAL,CAAqB,CACnB,GAAQG,CAAAA,MAAR,CAA6BM,KAA7B,CAAQN,KAAR,CAAeC,UAAf,CAA6BK,KAA7B,CAAeL,SAAf,CACA,GAAIO,CAAAA,aAAY,CAAGP,UAAnB,CACA,GAAIA,UAAJ,CAAe,CACb,GAAIA,UAAS,CAACQ,MAAV,CAAmB,CAAvB,CAA0B,CACxB,GAAIT,MAAK,GAAK,GAAd,CAAmB,CACjBQ,aAAY,CAAG,EAAf,CACAP,UAAS,CAACS,OAAV,CAAkB,SAACC,CAAD,CAAO,CACvB,GAAIA,CAAC,CAACE,QAAF,GAAeb,MAAnB,CAA0B,CACxBQ,aAAY,CAACI,IAAb,CAAkBD,CAAlB,EACD,CACF,CAJD,EAKD,CACF,CACF,CAED,MAAO,CACLZ,iBAAiB,CAAES,aADd,CAELR,KAAK,CAALA,MAFK,CAGLC,SAAS,CAATA,UAHK,CAAP,CAKD,CACD,QACE,MAAOK,CAAAA,KAAP,CA7CJ,CA+CD,CAhDD,CAkDA,cAAeD,CAAAA,OAAf","sourcesContent":["const FILTER_COUNTRIES = 'locationStore/filter/FILTER_COUNTRIES';\nconst FILTER_REFRESH = 'locationStore/filter/FILTER_REFRESH';\n\nconst initialState = {\n  countriesFiltered: null,\n  value: '-',\n  countries: ['Finland', 'Sweden', 'Norway', 'Denmark'],\n};\n\nexport const filterCountries = (payload) => ({\n  type: FILTER_COUNTRIES,\n  payload,\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FILTER_COUNTRIES: {\n      const value = action.payload;\n      const { countries } = state;\n      let newCountries = [];\n      if (countries.length > 0) {\n        if (value === '-') {\n          newCountries = null;\n        } else {\n          countries.forEach((c) => {\n            if (c === value) {\n              newCountries.push(c);\n            }\n          });\n        }\n      }\n      return {\n        countriesFiltered: newCountries,\n        value,\n        countries,\n      };\n    }\n    case FILTER_REFRESH: {\n      const { value, countries } = state;\n      let newCountries = countries;\n      if (countries) {\n        if (countries.length > 0) {\n          if (value !== '-') {\n            newCountries = [];\n            countries.forEach((c) => {\n              if (c.category === value) {\n                newCountries.push(c);\n              }\n            });\n          }\n        }\n      }\n\n      return {\n        countriesFiltered: newCountries,\n        value,\n        countries,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}