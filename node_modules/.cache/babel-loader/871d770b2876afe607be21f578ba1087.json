{"ast":null,"code":"/*  Extract the countries and the capital to get :\n- country name\n- country temp, max-temp, min-temp, main\n-\n*/\nconst RECEIVE_LOCATIONS = 'locationStore/locations/RECEIVE_LOCATIONS';\nconst FETCH_CITIES = 'locationStore/locations/FETCH_CITIES';\nexport const fetchCities = cities => ({\n  type: FETCH_CITIES,\n  cities\n});\nconst initialState = {\n  europe: {},\n  countries: ['Finland', 'Sweden', 'Norway', 'Denmark'],\n  cities: null\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case RECEIVE_LOCATIONS:\n      {\n        const {\n          locations\n        } = action;\n        const {\n          europe\n        } = locations;\n        const {\n          countries,\n          cities\n        } = state;\n        return {\n          europe,\n          countries,\n          cities\n        };\n      }\n\n    case FETCH_CITIES:\n      {\n        const {\n          cities\n        } = action;\n        const {\n          countries,\n          europe\n        } = state;\n        const keys = Object.keys(cities);\n        console.log(keys);\n        return {\n          europe,\n          countries,\n          cities\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/jarri/Desktop/Work/Microverse/capstones/capstone-3-files/capstone-3_redux/src/redux/locations/locations.js"],"names":["RECEIVE_LOCATIONS","FETCH_CITIES","fetchCities","cities","type","initialState","europe","countries","reducer","state","action","locations","keys","Object","console","log"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,iBAAiB,GAAG,2CAA1B;AACA,MAAMC,YAAY,GAAG,sCAArB;AAEA,OAAO,MAAMC,WAAW,GAAIC,MAAD,KAAa;AACtCC,EAAAA,IAAI,EAAEH,YADgC;AAEtCE,EAAAA;AAFsC,CAAb,CAApB;AAKP,MAAME,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,SAAS,EAAE,CAAC,SAAD,EAAY,QAAZ,EAAsB,QAAtB,EAAgC,SAAhC,CAFQ;AAGnBJ,EAAAA,MAAM,EAAE;AAHW,CAArB;;AAMA,MAAMK,OAAO,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACN,IAAf;AACE,SAAKJ,iBAAL;AAAwB;AACtB,cAAM;AAAEW,UAAAA;AAAF,YAAgBD,MAAtB;AACA,cAAM;AAAEJ,UAAAA;AAAF,YAAaK,SAAnB;AACA,cAAM;AAAEJ,UAAAA,SAAF;AAAaJ,UAAAA;AAAb,YAAwBM,KAA9B;AACA,eAAO;AAAEH,UAAAA,MAAF;AAAUC,UAAAA,SAAV;AAAqBJ,UAAAA;AAArB,SAAP;AACD;;AACD,SAAKF,YAAL;AAAmB;AACjB,cAAM;AAAEE,UAAAA;AAAF,YAAaO,MAAnB;AACA,cAAM;AAAEH,UAAAA,SAAF;AAAaD,UAAAA;AAAb,YAAwBG,KAA9B;AACA,cAAMG,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYT,MAAZ,CAAb;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,eAAO;AAAEN,UAAAA,MAAF;AAAUC,UAAAA,SAAV;AAAqBJ,UAAAA;AAArB,SAAP;AACD;;AACD;AACE,aAAOM,KAAP;AAfJ;AAiBD,CAlBD;;AAoBA,eAAeD,OAAf","sourcesContent":["/*  Extract the countries and the capital to get :\n- country name\n- country temp, max-temp, min-temp, main\n-\n*/\nconst RECEIVE_LOCATIONS = 'locationStore/locations/RECEIVE_LOCATIONS';\nconst FETCH_CITIES = 'locationStore/locations/FETCH_CITIES';\n\nexport const fetchCities = (cities) => ({\n  type: FETCH_CITIES,\n  cities,\n});\n\nconst initialState = {\n  europe: {},\n  countries: ['Finland', 'Sweden', 'Norway', 'Denmark'],\n  cities: null,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case RECEIVE_LOCATIONS: {\n      const { locations } = action;\n      const { europe } = locations;\n      const { countries, cities } = state;\n      return { europe, countries, cities };\n    }\n    case FETCH_CITIES: {\n      const { cities } = action;\n      const { countries, europe } = state;\n      const keys = Object.keys(cities);\n      console.log(keys);\n      return { europe, countries, cities };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}