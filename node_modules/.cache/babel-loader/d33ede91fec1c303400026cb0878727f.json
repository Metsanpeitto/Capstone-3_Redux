{"ast":null,"code":"const FILTER_COUNTRIES = 'locationStore/filter/FILTER_COUNTRIES';\nconst FILTER_REFRESH = 'locationStore/filter/FILTER_REFRESH';\nconst initialState = {\n  countriesFiltered: null,\n  locationsFiltered: null,\n  value: '-',\n  countries: ['Finland', 'Sweden', 'Norway', 'Denmark']\n};\nexport const filterCountries = payload => ({\n  type: FILTER_COUNTRIES,\n  payload\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FILTER_COUNTRIES:\n      {\n        const {\n          value,\n          locations\n        } = action.payload;\n        console.log(action.payload);\n        const {\n          countries\n        } = state;\n        let newCountries = [];\n        let newLocations = [];\n\n        if (countries.length > 0) {\n          if (value === '-') {\n            newCountries = null;\n            newLocations = null;\n          } else {\n            countries.forEach((c, index) => {\n              if (c === value) {\n                newCountries.push(c);\n                newLocations.push(locations[index]);\n              }\n            });\n          }\n        }\n\n        return {\n          countriesFiltered: newCountries,\n          locationsFiltered: newLocations,\n          value,\n          countries\n        };\n      }\n\n    case FILTER_REFRESH:\n      {\n        const {\n          value,\n          countries\n        } = state;\n        let newCountries = countries;\n\n        if (countries) {\n          if (countries.length > 0) {\n            if (value !== '-') {\n              newCountries = [];\n              countries.forEach(c => {\n                if (c.category === value) {\n                  newCountries.push(c);\n                }\n              });\n            }\n          }\n        }\n\n        return {\n          countriesFiltered: newCountries,\n          value,\n          countries\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/jarri/Desktop/Work/Microverse/capstones/capstone-3-files/capstone-3_redux/src/redux/filter/filter.js"],"names":["FILTER_COUNTRIES","FILTER_REFRESH","initialState","countriesFiltered","locationsFiltered","value","countries","filterCountries","payload","type","reducer","state","action","locations","console","log","newCountries","newLocations","length","forEach","c","index","push","category"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,uCAAzB;AACA,MAAMC,cAAc,GAAG,qCAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,iBAAiB,EAAE,IADA;AAEnBC,EAAAA,iBAAiB,EAAE,IAFA;AAGnBC,EAAAA,KAAK,EAAE,GAHY;AAInBC,EAAAA,SAAS,EAAE,CAAC,SAAD,EAAY,QAAZ,EAAsB,QAAtB,EAAgC,SAAhC;AAJQ,CAArB;AAOA,OAAO,MAAMC,eAAe,GAAIC,OAAD,KAAc;AAC3CC,EAAAA,IAAI,EAAET,gBADqC;AAE3CQ,EAAAA;AAF2C,CAAd,CAAxB;;AAKP,MAAME,OAAO,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACH,IAAf;AACE,SAAKT,gBAAL;AAAuB;AACrB,cAAM;AAAEK,UAAAA,KAAF;AAASQ,UAAAA;AAAT,YAAuBD,MAAM,CAACJ,OAApC;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACJ,OAAnB;AACA,cAAM;AAAEF,UAAAA;AAAF,YAAgBK,KAAtB;AACA,YAAIK,YAAY,GAAG,EAAnB;AACA,YAAIC,YAAY,GAAG,EAAnB;;AACA,YAAIX,SAAS,CAACY,MAAV,GAAmB,CAAvB,EAA0B;AACxB,cAAIb,KAAK,KAAK,GAAd,EAAmB;AACjBW,YAAAA,YAAY,GAAG,IAAf;AACAC,YAAAA,YAAY,GAAG,IAAf;AACD,WAHD,MAGO;AACLX,YAAAA,SAAS,CAACa,OAAV,CAAkB,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAC9B,kBAAID,CAAC,KAAKf,KAAV,EAAiB;AACfW,gBAAAA,YAAY,CAACM,IAAb,CAAkBF,CAAlB;AACAH,gBAAAA,YAAY,CAACK,IAAb,CAAkBT,SAAS,CAACQ,KAAD,CAA3B;AACD;AACF,aALD;AAMD;AACF;;AACD,eAAO;AACLlB,UAAAA,iBAAiB,EAAEa,YADd;AAELZ,UAAAA,iBAAiB,EAAEa,YAFd;AAGLZ,UAAAA,KAHK;AAILC,UAAAA;AAJK,SAAP;AAMD;;AACD,SAAKL,cAAL;AAAqB;AACnB,cAAM;AAAEI,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAuBK,KAA7B;AACA,YAAIK,YAAY,GAAGV,SAAnB;;AACA,YAAIA,SAAJ,EAAe;AACb,cAAIA,SAAS,CAACY,MAAV,GAAmB,CAAvB,EAA0B;AACxB,gBAAIb,KAAK,KAAK,GAAd,EAAmB;AACjBW,cAAAA,YAAY,GAAG,EAAf;AACAV,cAAAA,SAAS,CAACa,OAAV,CAAmBC,CAAD,IAAO;AACvB,oBAAIA,CAAC,CAACG,QAAF,KAAelB,KAAnB,EAA0B;AACxBW,kBAAAA,YAAY,CAACM,IAAb,CAAkBF,CAAlB;AACD;AACF,eAJD;AAKD;AACF;AACF;;AAED,eAAO;AACLjB,UAAAA,iBAAiB,EAAEa,YADd;AAELX,UAAAA,KAFK;AAGLC,UAAAA;AAHK,SAAP;AAKD;;AACD;AACE,aAAOK,KAAP;AAlDJ;AAoDD,CArDD;;AAuDA,eAAeD,OAAf","sourcesContent":["const FILTER_COUNTRIES = 'locationStore/filter/FILTER_COUNTRIES';\nconst FILTER_REFRESH = 'locationStore/filter/FILTER_REFRESH';\n\nconst initialState = {\n  countriesFiltered: null,\n  locationsFiltered: null,\n  value: '-',\n  countries: ['Finland', 'Sweden', 'Norway', 'Denmark'],\n};\n\nexport const filterCountries = (payload) => ({\n  type: FILTER_COUNTRIES,\n  payload,\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FILTER_COUNTRIES: {\n      const { value, locations } = action.payload;\n      console.log(action.payload);\n      const { countries } = state;\n      let newCountries = [];\n      let newLocations = [];\n      if (countries.length > 0) {\n        if (value === '-') {\n          newCountries = null;\n          newLocations = null;\n        } else {\n          countries.forEach((c, index) => {\n            if (c === value) {\n              newCountries.push(c);\n              newLocations.push(locations[index]);\n            }\n          });\n        }\n      }\n      return {\n        countriesFiltered: newCountries,\n        locationsFiltered: newLocations,\n        value,\n        countries,\n      };\n    }\n    case FILTER_REFRESH: {\n      const { value, countries } = state;\n      let newCountries = countries;\n      if (countries) {\n        if (countries.length > 0) {\n          if (value !== '-') {\n            newCountries = [];\n            countries.forEach((c) => {\n              if (c.category === value) {\n                newCountries.push(c);\n              }\n            });\n          }\n        }\n      }\n\n      return {\n        countriesFiltered: newCountries,\n        value,\n        countries,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}