{"ast":null,"code":"const FILTER_COUNTRIES = 'locationStore/filter/FILTER_COUNTRIES';\nconst FILTER_REFRESH = 'locationStore/filter/FILTER_REFRESH';\nconst initialState = {\n  countriesFiltered: null,\n  value: '-',\n  countries: ['Finland', 'Sweden', 'Norway', 'Denmark']\n};\nexport const filterCountries = payload => ({\n  type: FILTER_COUNTRIES,\n  payload\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FILTER_COUNTRIES:\n      {\n        const {\n          value\n        } = action.payload;\n        const {\n          countries\n        } = state;\n        console.log(value);\n        console.log(countries);\n        let newCountries = [];\n\n        if (countries.length > 0) {\n          if (value === '-') {\n            newCountries = null;\n          } else {\n            countries.forEach(b => {\n              if (b.category === value) {\n                newCountries.push(b);\n              }\n            });\n          }\n        }\n\n        return {\n          countriesFiltered: newCountries,\n          value,\n          countries\n        };\n      }\n\n    case FILTER_REFRESH:\n      {\n        const {\n          value,\n          countries\n        } = state;\n        let newCountries = countries;\n\n        if (countries) {\n          if (countries.length > 0) {\n            if (value !== '-') {\n              newCountries = [];\n              countries.forEach(c => {\n                if (c.category === value) {\n                  newCountries.push(c);\n                }\n              });\n            }\n          }\n        }\n\n        return {\n          countriesFiltered: newCountries,\n          value,\n          countries\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/jarri/Desktop/Work/Microverse/capstones/capstone-3-files/capstone-3_redux/src/redux/filter/filter.js"],"names":["FILTER_COUNTRIES","FILTER_REFRESH","initialState","countriesFiltered","value","countries","filterCountries","payload","type","reducer","state","action","console","log","newCountries","length","forEach","b","category","push","c"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,uCAAzB;AACA,MAAMC,cAAc,GAAG,qCAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,iBAAiB,EAAE,IADA;AAEnBC,EAAAA,KAAK,EAAE,GAFY;AAGnBC,EAAAA,SAAS,EAAE,CAAC,SAAD,EAAY,QAAZ,EAAsB,QAAtB,EAAgC,SAAhC;AAHQ,CAArB;AAMA,OAAO,MAAMC,eAAe,GAAIC,OAAD,KAAc;AAC3CC,EAAAA,IAAI,EAAER,gBADqC;AAE3CO,EAAAA;AAF2C,CAAd,CAAxB;;AAKP,MAAME,OAAO,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACH,IAAf;AACE,SAAKR,gBAAL;AAAuB;AACrB,cAAM;AAAEI,UAAAA;AAAF,YAAYO,MAAM,CAACJ,OAAzB;AACA,cAAM;AAAEF,UAAAA;AAAF,YAAgBK,KAAtB;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAYR,SAAZ;AACA,YAAIS,YAAY,GAAG,EAAnB;;AACA,YAAIT,SAAS,CAACU,MAAV,GAAmB,CAAvB,EAA0B;AACxB,cAAIX,KAAK,KAAK,GAAd,EAAmB;AACjBU,YAAAA,YAAY,GAAG,IAAf;AACD,WAFD,MAEO;AACLT,YAAAA,SAAS,CAACW,OAAV,CAAmBC,CAAD,IAAO;AACvB,kBAAIA,CAAC,CAACC,QAAF,KAAed,KAAnB,EAA0B;AACxBU,gBAAAA,YAAY,CAACK,IAAb,CAAkBF,CAAlB;AACD;AACF,aAJD;AAKD;AACF;;AACD,eAAO;AACLd,UAAAA,iBAAiB,EAAEW,YADd;AAELV,UAAAA,KAFK;AAGLC,UAAAA;AAHK,SAAP;AAKD;;AACD,SAAKJ,cAAL;AAAqB;AACnB,cAAM;AAAEG,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAuBK,KAA7B;AACA,YAAII,YAAY,GAAGT,SAAnB;;AACA,YAAIA,SAAJ,EAAe;AACb,cAAIA,SAAS,CAACU,MAAV,GAAmB,CAAvB,EAA0B;AACxB,gBAAIX,KAAK,KAAK,GAAd,EAAmB;AACjBU,cAAAA,YAAY,GAAG,EAAf;AACAT,cAAAA,SAAS,CAACW,OAAV,CAAmBI,CAAD,IAAO;AACvB,oBAAIA,CAAC,CAACF,QAAF,KAAed,KAAnB,EAA0B;AACxBU,kBAAAA,YAAY,CAACK,IAAb,CAAkBC,CAAlB;AACD;AACF,eAJD;AAKD;AACF;AACF;;AAED,eAAO;AACLjB,UAAAA,iBAAiB,EAAEW,YADd;AAELV,UAAAA,KAFK;AAGLC,UAAAA;AAHK,SAAP;AAKD;;AACD;AACE,aAAOK,KAAP;AA/CJ;AAiDD,CAlDD;;AAoDA,eAAeD,OAAf","sourcesContent":["const FILTER_COUNTRIES = 'locationStore/filter/FILTER_COUNTRIES';\nconst FILTER_REFRESH = 'locationStore/filter/FILTER_REFRESH';\n\nconst initialState = {\n  countriesFiltered: null,\n  value: '-',\n  countries: ['Finland', 'Sweden', 'Norway', 'Denmark'],\n};\n\nexport const filterCountries = (payload) => ({\n  type: FILTER_COUNTRIES,\n  payload,\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FILTER_COUNTRIES: {\n      const { value } = action.payload;\n      const { countries } = state;\n      console.log(value);\n      console.log(countries);\n      let newCountries = [];\n      if (countries.length > 0) {\n        if (value === '-') {\n          newCountries = null;\n        } else {\n          countries.forEach((b) => {\n            if (b.category === value) {\n              newCountries.push(b);\n            }\n          });\n        }\n      }\n      return {\n        countriesFiltered: newCountries,\n        value,\n        countries,\n      };\n    }\n    case FILTER_REFRESH: {\n      const { value, countries } = state;\n      let newCountries = countries;\n      if (countries) {\n        if (countries.length > 0) {\n          if (value !== '-') {\n            newCountries = [];\n            countries.forEach((c) => {\n              if (c.category === value) {\n                newCountries.push(c);\n              }\n            });\n          }\n        }\n      }\n\n      return {\n        countriesFiltered: newCountries,\n        value,\n        countries,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}