{"ast":null,"code":"import axios from 'axios';\nconst url = 'https://api.openweathermap.org/data/2.5/find?';\nconst appId = '7d21fcc19d2a5ea9e47384b584b78a2e';\nconst cities = ['oulu', 'helsinki', 'tornio', 'kemi', 'lulea', 'uppsala', 'Göteborg', 'stockholm', 'oslo', 'tromso', 'vardo', 'bergen', 'copenhagen', 'helsingor', 'skagen', 'aalborg'];\n\nconst request = city => axios.get(`${url}q=${city}&appid=${appId}`);\n\nconst process = result => {\n  let location = null;\n\n  if (result) {\n    if (result.status === 200) {\n      const {\n        data\n      } = result;\n      const {\n        list\n      } = data; // eslint-disable-next-line prefer-destructuring\n\n      location = list[0];\n    }\n  }\n\n  return location;\n};\n\nconst getLocations = async () => {\n  let locations = null;\n  const axiosOulu = request(cities[0]);\n  const axiosHelsinki = request(cities[1]);\n  const axiosTornio = request(cities[2]);\n  const axiosKemili = request(cities[3]);\n  const axiosLulea = request(cities[4]);\n  const axiosUppsala = request(cities[5]);\n  const axiosGoteborg = request(cities[6]);\n  const axiosStockholm = request(cities[7]);\n  const axioOsslo = request(cities[8]);\n  const axiosTromso = request(cities[9]);\n  const axiosVardo = request(cities[10]);\n  const axiosBergen = request(cities[11]);\n  const axiosCopenhagen = request(cities[12]);\n  const axiosHelsingor = request(cities[13]);\n  const axiosSkagen = request(cities[14]);\n  const axiosAlborg = request(cities[15]);\n  await axios.all([axiosOulu, axiosHelsinki, axiosTornio, axiosKemili, axiosLulea, axiosUppsala, axiosGoteborg, axiosStockholm, axioOsslo, axiosTromso, axiosVardo, axiosBergen, axiosCopenhagen, axiosHelsingor, axiosSkagen, axiosAlborg]).then(axios.spread((res0, res1, res2, res3, res4, res5, res6, res7, res8, res9, res10, res11, res12, res13, res14, res15) => {\n    locations = {\n      europe: {\n        Finland: {\n          oulu: process(res0),\n          helsinki: process(res1),\n          tornio: process(res2),\n          kemili: process(res3)\n        },\n        Sweden: {\n          lulea: process(res4),\n          uppsala: process(res5),\n          goteborg: process(res6),\n          stockholm: process(res7)\n        },\n        Norway: {\n          oslo: process(res8),\n          tromso: process(res9),\n          vardo: process(res10),\n          bergen: process(res11)\n        },\n        Denmark: {\n          copenhagen: process(res12),\n          helsingor: process(res13),\n          skagen: process(res14),\n          aalborg: process(res15)\n        }\n      }\n    };\n  }));\n  return locations;\n};\n\nexport default {\n  getLocations\n};","map":{"version":3,"sources":["/home/jarri/Desktop/Work/Microverse/capstones/capstone-3-files/capstone-3_redux/src/api/api.js"],"names":["axios","url","appId","cities","request","city","get","process","result","location","status","data","list","getLocations","locations","axiosOulu","axiosHelsinki","axiosTornio","axiosKemili","axiosLulea","axiosUppsala","axiosGoteborg","axiosStockholm","axioOsslo","axiosTromso","axiosVardo","axiosBergen","axiosCopenhagen","axiosHelsingor","axiosSkagen","axiosAlborg","all","then","spread","res0","res1","res2","res3","res4","res5","res6","res7","res8","res9","res10","res11","res12","res13","res14","res15","europe","Finland","oulu","helsinki","tornio","kemili","Sweden","lulea","uppsala","goteborg","stockholm","Norway","oslo","tromso","vardo","bergen","Denmark","copenhagen","helsingor","skagen","aalborg"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst url = 'https://api.openweathermap.org/data/2.5/find?';\nconst appId = '7d21fcc19d2a5ea9e47384b584b78a2e';\n\nconst cities = [\n  'oulu',\n  'helsinki',\n  'tornio',\n  'kemi',\n  'lulea',\n  'uppsala',\n  'Göteborg',\n  'stockholm',\n  'oslo',\n  'tromso',\n  'vardo',\n  'bergen',\n  'copenhagen',\n  'helsingor',\n  'skagen',\n  'aalborg',\n];\n\nconst request = (city) => axios.get(`${url}q=${city}&appid=${appId}`);\n\nconst process = (result) => {\n  let location = null;\n  if (result) {\n    if (result.status === 200) {\n      const { data } = result;\n      const { list } = data;\n      // eslint-disable-next-line prefer-destructuring\n      location = list[0];\n    }\n  }\n  return location;\n};\n\nconst getLocations = async () => {\n  let locations = null;\n  const axiosOulu = request(cities[0]);\n  const axiosHelsinki = request(cities[1]);\n  const axiosTornio = request(cities[2]);\n  const axiosKemili = request(cities[3]);\n  const axiosLulea = request(cities[4]);\n  const axiosUppsala = request(cities[5]);\n  const axiosGoteborg = request(cities[6]);\n  const axiosStockholm = request(cities[7]);\n  const axioOsslo = request(cities[8]);\n  const axiosTromso = request(cities[9]);\n  const axiosVardo = request(cities[10]);\n  const axiosBergen = request(cities[11]);\n  const axiosCopenhagen = request(cities[12]);\n  const axiosHelsingor = request(cities[13]);\n  const axiosSkagen = request(cities[14]);\n  const axiosAlborg = request(cities[15]);\n\n  await axios\n    .all([\n      axiosOulu,\n      axiosHelsinki,\n      axiosTornio,\n      axiosKemili,\n      axiosLulea,\n      axiosUppsala,\n      axiosGoteborg,\n      axiosStockholm,\n      axioOsslo,\n      axiosTromso,\n      axiosVardo,\n      axiosBergen,\n      axiosCopenhagen,\n      axiosHelsingor,\n      axiosSkagen,\n      axiosAlborg,\n    ])\n    .then(\n      axios.spread(\n        (\n          res0,\n          res1,\n          res2,\n          res3,\n          res4,\n          res5,\n          res6,\n          res7,\n          res8,\n          res9,\n          res10,\n          res11,\n          res12,\n          res13,\n          res14,\n          res15,\n        ) => {\n          locations = {\n            europe: {\n              Finland: {\n                oulu: process(res0),\n                helsinki: process(res1),\n                tornio: process(res2),\n                kemili: process(res3),\n              },\n              Sweden: {\n                lulea: process(res4),\n                uppsala: process(res5),\n                goteborg: process(res6),\n                stockholm: process(res7),\n              },\n              Norway: {\n                oslo: process(res8),\n                tromso: process(res9),\n                vardo: process(res10),\n                bergen: process(res11),\n              },\n              Denmark: {\n                copenhagen: process(res12),\n                helsingor: process(res13),\n                skagen: process(res14),\n                aalborg: process(res15),\n              },\n            },\n          };\n        },\n      ),\n    );\n  return locations;\n};\nexport default { getLocations };\n"]},"metadata":{},"sourceType":"module"}