{"ast":null,"code":"var FILTER_COUNTRIES='locationStore/filter/FILTER_COUNTRIES';var FILTER_REFRESH='locationStore/filter/FILTER_REFRESH';var initialState={countriesFiltered:null,locationsFiltered:null,imgs:null,value:'-',countries:['Finland','Sweden','Norway','Denmark']};export var filterCountries=function filterCountries(payload){return{type:FILTER_COUNTRIES,payload:payload};};var reducer=function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case FILTER_COUNTRIES:{var _action$payload=action.payload,value=_action$payload.value,locations=_action$payload.locations,imgs=_action$payload.imgs;console.log(action);var countries=state.countries;var newCountries=[];var newLocations=[];var newImgs=[];if(countries.length>0){if(value==='-'){newCountries=null;newLocations=null;newImgs=null;}else{countries.forEach(function(c,index){if(c===value){newCountries.push(c);newLocations.push(locations[index]);newImgs.push(imgs[index]);}});}}return{countriesFiltered:newCountries,locationsFiltered:newLocations,imgsFiltered:newImgs,value:value,countries:countries};}case FILTER_REFRESH:{var _value=state.value,_countries=state.countries;var _newCountries=_countries;if(_countries){if(_countries.length>0){if(_value!=='-'){_newCountries=[];_countries.forEach(function(c){if(c.category===_value){_newCountries.push(c);}});}}}return{countriesFiltered:_newCountries,value:_value,countries:_countries};}default:return state;}};export default reducer;","map":{"version":3,"sources":["/home/jarri/Desktop/Work/Microverse/capstones/capstone-3-files/capstone-3_redux/src/redux/filter/filter.js"],"names":["FILTER_COUNTRIES","FILTER_REFRESH","initialState","countriesFiltered","locationsFiltered","imgs","value","countries","filterCountries","payload","type","reducer","state","action","locations","console","log","newCountries","newLocations","newImgs","length","forEach","c","index","push","imgsFiltered","category"],"mappings":"AAAA,GAAMA,CAAAA,gBAAgB,CAAG,uCAAzB,CACA,GAAMC,CAAAA,cAAc,CAAG,qCAAvB,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,iBAAiB,CAAE,IADA,CAEnBC,iBAAiB,CAAE,IAFA,CAGnBC,IAAI,CAAE,IAHa,CAInBC,KAAK,CAAE,GAJY,CAKnBC,SAAS,CAAE,CAAC,SAAD,CAAY,QAAZ,CAAsB,QAAtB,CAAgC,SAAhC,CALQ,CAArB,CAQA,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,OAAD,QAAc,CAC3CC,IAAI,CAAEV,gBADqC,CAE3CS,OAAO,CAAPA,OAF2C,CAAd,EAAxB,CAKP,GAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBV,YAAyB,IAAXW,CAAAA,MAAW,2CAChD,OAAQA,MAAM,CAACH,IAAf,EACE,IAAKV,CAAAA,gBAAL,CAAuB,CACrB,oBAAmCa,MAAM,CAACJ,OAA1C,CAAQH,KAAR,iBAAQA,KAAR,CAAeQ,SAAf,iBAAeA,SAAf,CAA0BT,IAA1B,iBAA0BA,IAA1B,CACAU,OAAO,CAACC,GAAR,CAAYH,MAAZ,EACA,GAAQN,CAAAA,SAAR,CAAsBK,KAAtB,CAAQL,SAAR,CACA,GAAIU,CAAAA,YAAY,CAAG,EAAnB,CACA,GAAIC,CAAAA,YAAY,CAAG,EAAnB,CACA,GAAIC,CAAAA,OAAO,CAAG,EAAd,CACA,GAAIZ,SAAS,CAACa,MAAV,CAAmB,CAAvB,CAA0B,CACxB,GAAId,KAAK,GAAK,GAAd,CAAmB,CACjBW,YAAY,CAAG,IAAf,CACAC,YAAY,CAAG,IAAf,CACAC,OAAO,CAAG,IAAV,CACD,CAJD,IAIO,CACLZ,SAAS,CAACc,OAAV,CAAkB,SAACC,CAAD,CAAIC,KAAJ,CAAc,CAC9B,GAAID,CAAC,GAAKhB,KAAV,CAAiB,CACfW,YAAY,CAACO,IAAb,CAAkBF,CAAlB,EACAJ,YAAY,CAACM,IAAb,CAAkBV,SAAS,CAACS,KAAD,CAA3B,EACAJ,OAAO,CAACK,IAAR,CAAanB,IAAI,CAACkB,KAAD,CAAjB,EACD,CACF,CAND,EAOD,CACF,CACD,MAAO,CACLpB,iBAAiB,CAAEc,YADd,CAELb,iBAAiB,CAAEc,YAFd,CAGLO,YAAY,CAAEN,OAHT,CAILb,KAAK,CAALA,KAJK,CAKLC,SAAS,CAATA,SALK,CAAP,CAOD,CACD,IAAKN,CAAAA,cAAL,CAAqB,CACnB,GAAQK,CAAAA,MAAR,CAA6BM,KAA7B,CAAQN,KAAR,CAAeC,UAAf,CAA6BK,KAA7B,CAAeL,SAAf,CACA,GAAIU,CAAAA,aAAY,CAAGV,UAAnB,CACA,GAAIA,UAAJ,CAAe,CACb,GAAIA,UAAS,CAACa,MAAV,CAAmB,CAAvB,CAA0B,CACxB,GAAId,MAAK,GAAK,GAAd,CAAmB,CACjBW,aAAY,CAAG,EAAf,CACAV,UAAS,CAACc,OAAV,CAAkB,SAACC,CAAD,CAAO,CACvB,GAAIA,CAAC,CAACI,QAAF,GAAepB,MAAnB,CAA0B,CACxBW,aAAY,CAACO,IAAb,CAAkBF,CAAlB,EACD,CACF,CAJD,EAKD,CACF,CACF,CAED,MAAO,CACLnB,iBAAiB,CAAEc,aADd,CAELX,KAAK,CAALA,MAFK,CAGLC,SAAS,CAATA,UAHK,CAAP,CAKD,CACD,QACE,MAAOK,CAAAA,KAAP,CAtDJ,CAwDD,CAzDD,CA2DA,cAAeD,CAAAA,OAAf","sourcesContent":["const FILTER_COUNTRIES = 'locationStore/filter/FILTER_COUNTRIES';\nconst FILTER_REFRESH = 'locationStore/filter/FILTER_REFRESH';\n\nconst initialState = {\n  countriesFiltered: null,\n  locationsFiltered: null,\n  imgs: null,\n  value: '-',\n  countries: ['Finland', 'Sweden', 'Norway', 'Denmark'],\n};\n\nexport const filterCountries = (payload) => ({\n  type: FILTER_COUNTRIES,\n  payload,\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FILTER_COUNTRIES: {\n      const { value, locations, imgs } = action.payload;\n      console.log(action);\n      const { countries } = state;\n      let newCountries = [];\n      let newLocations = [];\n      let newImgs = [];\n      if (countries.length > 0) {\n        if (value === '-') {\n          newCountries = null;\n          newLocations = null;\n          newImgs = null;\n        } else {\n          countries.forEach((c, index) => {\n            if (c === value) {\n              newCountries.push(c);\n              newLocations.push(locations[index]);\n              newImgs.push(imgs[index]);\n            }\n          });\n        }\n      }\n      return {\n        countriesFiltered: newCountries,\n        locationsFiltered: newLocations,\n        imgsFiltered: newImgs,\n        value,\n        countries,\n      };\n    }\n    case FILTER_REFRESH: {\n      const { value, countries } = state;\n      let newCountries = countries;\n      if (countries) {\n        if (countries.length > 0) {\n          if (value !== '-') {\n            newCountries = [];\n            countries.forEach((c) => {\n              if (c.category === value) {\n                newCountries.push(c);\n              }\n            });\n          }\n        }\n      }\n\n      return {\n        countriesFiltered: newCountries,\n        value,\n        countries,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}