{"ast":null,"code":"import _regeneratorRuntime from\"/home/jarri/Desktop/Work/Microverse/capstones/capstone-3-files/capstone-3_redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/jarri/Desktop/Work/Microverse/capstones/capstone-3-files/capstone-3_redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/* eslint-disable no-unused-vars */ /* eslint-disable camelcase */import axios from'axios';var url='https://api.openweathermap.org/data/2.5/find?';var appId='7d21fcc19d2a5ea9e47384b584b78a2e';var cities=['oulu','helsinki','tornio','kemi','lulea','uppsala','GÃ¶teborg','stockholm','oslo','tromso','vardo','bergen','copenhagen','helsingor','skagen','aalborg'];var request=function request(city){return axios.get(\"\".concat(url,\"q=\").concat(city,\"&appid=\").concat(appId));};var process=function process(result){var location=null;if(result){if(result.status===200){var data=result.data;var list=data.list;// eslint-disable-next-line prefer-destructuring\nlocation=list[0];}}return location;};var getLocations=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var locations,axiosOulu,axiosHelsinki,axiosTornio,axiosKemili,axiosLulea,axiosUppsala,axiosGoteborg,axiosStockholm,axioOsslo,axiosTromso,axiosVardo,axiosBergen,axiosCopenhagen,axiosHelsingor,axiosSkagen,axiosAlborg,countriesObject,keys,countriesNew,kelvinDifference;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:locations=null;axiosOulu=request(cities[0]);axiosHelsinki=request(cities[1]);axiosTornio=request(cities[2]);axiosKemili=request(cities[3]);axiosLulea=request(cities[4]);axiosUppsala=request(cities[5]);axiosGoteborg=request(cities[6]);axiosStockholm=request(cities[7]);axioOsslo=request(cities[8]);axiosTromso=request(cities[9]);axiosVardo=request(cities[10]);axiosBergen=request(cities[11]);axiosCopenhagen=request(cities[12]);axiosHelsingor=request(cities[13]);axiosSkagen=request(cities[14]);axiosAlborg=request(cities[15]);_context.next=19;return axios.all([axiosOulu,axiosHelsinki,axiosTornio,axiosKemili,axiosLulea,axiosUppsala,axiosGoteborg,axiosStockholm,axioOsslo,axiosTromso,axiosVardo,axiosBergen,axiosCopenhagen,axiosHelsingor,axiosSkagen,axiosAlborg]).then(axios.spread(function(res0,res1,res2,res3,res4,res5,res6,res7,res8,res9,res10,res11,res12,res13,res14,res15){locations={europe:{Finland:{oulu:process(res0),helsinki:process(res1),tornio:process(res2),kemili:process(res3)},Sweden:{lulea:process(res4),uppsala:process(res5),goteborg:process(res6),stockholm:process(res7)},Norway:{oslo:process(res8),tromso:process(res9),vardo:process(res10),bergen:process(res11)},Denmark:{copenhagen:process(res12),helsingor:process(res13),skagen:process(res14),aalborg:process(res15)}}};}));case 19:// eslint-disable-next-line no-unused-vars\ncountriesObject=locations.europe;keys=Object.keys(countriesObject);countriesNew=[];kelvinDifference=273.15;keys.forEach(function(k){var citiesObject=countriesObject[k];var citiesNew=[];var cities=Object.keys(citiesObject);cities.forEach(function(c){var cityObject=citiesObject[c];var id=cityObject.id,name=cityObject.name,main=cityObject.main,rain=cityObject.rain,snow=cityObject.snow;var temp_max=main.temp_max,temp_min=main.temp_min,humidity=main.humidity;var tmpK=main.temp;var tempC=(tmpK-kelvinDifference).toFixed(2);var tempMaxC=(temp_max-kelvinDifference).toFixed(2);var tempMinC=(temp_min-kelvinDifference).toFixed(2);var temp=\"\".concat(tempC,\" C \");var tempMax=\"\".concat(tempMaxC,\" C \");var tempMin=\"\".concat(tempMinC,\" C \");var city={id:id,name:name,main:main,rain:rain,snow:snow,temp:temp,tempMax:tempMax,tempMin:tempMin,humidity:humidity};citiesNew.push(city);});countriesNew.push(citiesNew);});return _context.abrupt(\"return\",countriesNew);case 25:case\"end\":return _context.stop();}}},_callee);}));return function getLocations(){return _ref.apply(this,arguments);};}();export default{getLocations:getLocations};","map":{"version":3,"sources":["/home/jarri/Desktop/Work/Microverse/capstones/capstone-3-files/capstone-3_redux/src/api/api.js"],"names":["axios","url","appId","cities","request","city","get","process","result","location","status","data","list","getLocations","locations","axiosOulu","axiosHelsinki","axiosTornio","axiosKemili","axiosLulea","axiosUppsala","axiosGoteborg","axiosStockholm","axioOsslo","axiosTromso","axiosVardo","axiosBergen","axiosCopenhagen","axiosHelsingor","axiosSkagen","axiosAlborg","all","then","spread","res0","res1","res2","res3","res4","res5","res6","res7","res8","res9","res10","res11","res12","res13","res14","res15","europe","Finland","oulu","helsinki","tornio","kemili","Sweden","lulea","uppsala","goteborg","stockholm","Norway","oslo","tromso","vardo","bergen","Denmark","copenhagen","helsingor","skagen","aalborg","countriesObject","keys","Object","countriesNew","kelvinDifference","forEach","k","citiesObject","citiesNew","c","cityObject","id","name","main","rain","snow","temp_max","temp_min","humidity","tmpK","temp","tempC","toFixed","tempMaxC","tempMinC","tempMax","tempMin","push"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable camelcase */\nimport axios from 'axios';\n\nconst url = 'https://api.openweathermap.org/data/2.5/find?';\nconst appId = '7d21fcc19d2a5ea9e47384b584b78a2e';\n\nconst cities = [\n  'oulu',\n  'helsinki',\n  'tornio',\n  'kemi',\n  'lulea',\n  'uppsala',\n  'GÃ¶teborg',\n  'stockholm',\n  'oslo',\n  'tromso',\n  'vardo',\n  'bergen',\n  'copenhagen',\n  'helsingor',\n  'skagen',\n  'aalborg',\n];\n\nconst request = (city) => axios.get(`${url}q=${city}&appid=${appId}`);\n\nconst process = (result) => {\n  let location = null;\n  if (result) {\n    if (result.status === 200) {\n      const { data } = result;\n      const { list } = data;\n      // eslint-disable-next-line prefer-destructuring\n      location = list[0];\n    }\n  }\n  return location;\n};\n\nconst getLocations = async () => {\n  let locations = null;\n  const axiosOulu = request(cities[0]);\n  const axiosHelsinki = request(cities[1]);\n  const axiosTornio = request(cities[2]);\n  const axiosKemili = request(cities[3]);\n  const axiosLulea = request(cities[4]);\n  const axiosUppsala = request(cities[5]);\n  const axiosGoteborg = request(cities[6]);\n  const axiosStockholm = request(cities[7]);\n  const axioOsslo = request(cities[8]);\n  const axiosTromso = request(cities[9]);\n  const axiosVardo = request(cities[10]);\n  const axiosBergen = request(cities[11]);\n  const axiosCopenhagen = request(cities[12]);\n  const axiosHelsingor = request(cities[13]);\n  const axiosSkagen = request(cities[14]);\n  const axiosAlborg = request(cities[15]);\n\n  await axios\n    .all([\n      axiosOulu,\n      axiosHelsinki,\n      axiosTornio,\n      axiosKemili,\n      axiosLulea,\n      axiosUppsala,\n      axiosGoteborg,\n      axiosStockholm,\n      axioOsslo,\n      axiosTromso,\n      axiosVardo,\n      axiosBergen,\n      axiosCopenhagen,\n      axiosHelsingor,\n      axiosSkagen,\n      axiosAlborg,\n    ])\n    .then(\n      axios.spread(\n        (\n          res0,\n          res1,\n          res2,\n          res3,\n          res4,\n          res5,\n          res6,\n          res7,\n          res8,\n          res9,\n          res10,\n          res11,\n          res12,\n          res13,\n          res14,\n          res15,\n        ) => {\n          locations = {\n            europe: {\n              Finland: {\n                oulu: process(res0),\n                helsinki: process(res1),\n                tornio: process(res2),\n                kemili: process(res3),\n              },\n              Sweden: {\n                lulea: process(res4),\n                uppsala: process(res5),\n                goteborg: process(res6),\n                stockholm: process(res7),\n              },\n              Norway: {\n                oslo: process(res8),\n                tromso: process(res9),\n                vardo: process(res10),\n                bergen: process(res11),\n              },\n              Denmark: {\n                copenhagen: process(res12),\n                helsingor: process(res13),\n                skagen: process(res14),\n                aalborg: process(res15),\n              },\n            },\n          };\n        },\n      ),\n    );\n\n  // eslint-disable-next-line no-unused-vars\n  const countriesObject = locations.europe;\n  const keys = Object.keys(countriesObject);\n  const countriesNew = [];\n  const kelvinDifference = 273.15;\n  keys.forEach((k) => {\n    const citiesObject = countriesObject[k];\n    const citiesNew = [];\n    const cities = Object.keys(citiesObject);\n    cities.forEach((c) => {\n      const cityObject = citiesObject[c];\n      const {\n        id, name, main, rain, snow,\n      } = cityObject;\n      const { temp_max, temp_min, humidity } = main;\n      const tmpK = main.temp;\n      const tempC = (tmpK - kelvinDifference).toFixed(2);\n      const tempMaxC = (temp_max - kelvinDifference).toFixed(2);\n      const tempMinC = (temp_min - kelvinDifference).toFixed(2);\n\n      const temp = `${tempC} C `;\n      const tempMax = `${tempMaxC} C `;\n      const tempMin = `${tempMinC} C `;\n\n      const city = {\n        id,\n        name,\n        main,\n        rain,\n        snow,\n        temp,\n        tempMax,\n        tempMin,\n        humidity,\n      };\n      citiesNew.push(city);\n    });\n    countriesNew.push(citiesNew);\n  });\n  return countriesNew;\n};\nexport default { getLocations };\n"]},"metadata":{},"sourceType":"module"}